package questions.leetcode;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

class MinimizeMalwareSpread {

    class UnionFind {
        int[] parents;
        int[] rank;

        UnionFind(int n) {
            parents = new int[n];
            rank = new int[n];

            for (int i=0; i<n; i++) {
                parents[i] = i;
                rank[i] = 1;
            }
        }

        public int find(int v) {
            if (parents[v] != v) {
                return parents[v] = find(parents[v]);
            }
            return v;
        }

        public void union(int v1, int v2) {
            int p1 = find(v1);
            int p2 = find(v2);

            if (p1 != p2) {
                parents[p2] = p1;
                rank[p1] = rank[p1] + rank[p2];
            }
        }
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        UnionFind ds = new UnionFind(graph.length);
        for (int i=0; i<graph.length; i++) {
            for (int j=0; j<graph.length; j++) {
                if (graph[i][j] == 1) {
                    ds.union(i, j);
                }
            }
        }

        Map<Integer, Integer> infected = new HashMap<>();
        Arrays.sort(initial);

        for (int i=0; i<initial.length; i++) {
            int parentOfCurrentNode = ds.find(initial[i]);
            infected.put(parentOfCurrentNode, infected.getOrDefault(parentOfCurrentNode, 0) + 1);
        }

        int candidateNode = initial[0];
        int maximumSize = 0;

        for (int i=0; i<initial.length; i++) {
            int infectedCount = infected.get(ds.find(initial[i]));
            int componentSize = ds.rank[ds.find(initial[i])];
            if (infectedCount != 1) {
                continue;
            }

            if (componentSize > maximumSize) {
                maximumSize = componentSize;
                candidateNode = initial[i];
            } else if (componentSize == maximumSize && initial[i] < candidateNode) {
                candidateNode = initial[i];
            }
        }
        return candidateNode;
    }
}
